#!/usr/bin/env python3
# scripts/test_generator.py - Test and debug script for Dignity AI

import os
import sys
import json
from datetime import datetime

def test_environment():
    """Test the development environment"""
    print("🧪 DIGNITY AI - ENVIRONMENT TESTING")
    print("=" * 50)
    
    # Python version
    print(f"Python Version: {sys.version}")
    
    # Test imports
    imports_to_test = [
        'feedparser',
        'requests', 
        'anthropic',
        'python_dateutil'
    ]
    
    for module in imports_to_test:
        try:
            __import__(module)
            print(f"✅ {module} - OK")
        except ImportError:
            print(f"❌ {module} - MISSING")
    
    # Test API key
    api_key = os.environ.get('CLAUDE_API_KEY')
    if api_key:
        print(f"✅ CLAUDE_API_KEY - Found (starts with: {api_key[:10]}...)")
    else:
        print("❌ CLAUDE_API_KEY - Missing")
        print("   Set with: export CLAUDE_API_KEY='your_key_here'")
    
    # Test directories
    dirs_to_check = ['scripts', 'generated_content']
    for dir_name in dirs_to_check:
        if os.path.exists(dir_name):
            print(f"✅ {dir_name}/ directory - Exists")
        else:
            print(f"⚠️  {dir_name}/ directory - Missing (will be created)")
    
    return api_key is not None

def test_rss_feeds():
    """Test RSS feed connectivity"""
    print("\n📡 TESTING RSS FEEDS")
    print("=" * 30)
    
    try:
        import feedparser
        import requests
    except ImportError as e:
        print(f"❌ Cannot test feeds - missing dependencies: {e}")
        return False
    
    feeds = [
        "https://blockclubchicago.org/feed/",
        "https://feeds.feedburner.com/chicagoist/chicagoist",
        "https://www.chicagotribune.com/arcio/rss/category/news/",
        "https://chicago.suntimes.com/feeds/all.rss.xml"
    ]
    
    successful_feeds = 0
    
    for feed_url in feeds:
        try:
            print(f"Testing: {feed_url}")
            
            # Quick connectivity test
            response = requests.head(feed_url, timeout=10)
            if response.status_code == 200:
                print(f"  ✅ HTTP OK ({response.status_code})")
            else:
                print(f"  ⚠️  HTTP {response.status_code}")
            
            # Parse test
            feed = feedparser.parse(feed_url)
            if feed.entries:
                print(f"  ✅ {len(feed.entries)} articles found")
                successful_feeds += 1
            else:
                print(f"  ❌ No articles found")
                
        except Exception as e:
            print(f"  ❌ Error: {e}")
    
    print(f"\nFeed Summary: {successful_feeds}/{len(feeds)} feeds working")
    return successful_feeds > 0

def test_api_connection():
    """Test Anthropic API connection"""
    print("\n🤖 TESTING API CONNECTION")
    print("=" * 35)
    
    api_key = os.environ.get('CLAUDE_API_KEY')
    if not api_key:
        print("❌ No API key found")
        return False
    
    try:
        from anthropic import Anthropic
        
        client = Anthropic(api_key=api_key)
        
        # Simple test message
        response = client.messages.create(
            model="claude-3-5-haiku-20241022",
            max_tokens=50,
            messages=[{
                "role": "user", 
                "content": "Respond with exactly: 'Dignity AI test successful'"
            }]
        )
        
        result = response.content[0].text.strip()
        
        if "successful" in result.lower():
            print("✅ API connection working")
            print(f"   Response: {result}")
            return True
        else:
            print(f"⚠️  Unexpected response: {result}")
            return False
            
    except Exception as e:
        print(f"❌ API test failed: {e}")
        return False

def create_test_content():
    """Create sample content for testing"""
    print("\n📝 CREATING TEST CONTENT")
    print("=" * 35)
    
    try:
        os.makedirs('generated_content', exist_ok=True)
        
        # Test content
        test_content = f"""---
Generated: {datetime.now().isoformat()}
Framework: Dignity Lens
Organization: Defy Racism Collective
Test: true
---

# Test Content Generation

This is a test file generated by the Dignity AI system to verify that content creation and file saving are working correctly.

## Framework Test

The Dignity Lens framework analyzes systematic racism through four domains:

1. **Power Structures** - Who controls decisions?
2. **Control Mechanisms** - How are communities suppressed?  
3. **Community Resistance** - How do communities fight back?
4. **Liberation Strategies** - What builds genuine power?

## Test Results

✅ File creation: Working
✅ Directory creation: Working  
✅ Metadata inclusion: Working
✅ Content formatting: Working

Generated at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

---
*This is test content from the Dignity AI system developed by the Defy Racism Collective.*
"""
        
        # Save test file
        test_filename = f"test-{datetime.now().strftime('%Y%m%d-%H%M%S')}.md"
        filepath = os.path.join('generated_content', test_filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(test_content)
        
        print(f"✅ Created test file: {filepath}")
        
        # Create test index
        index_data = {
            'test_run': True,
            'timestamp': datetime.now().isoformat(),
            'framework': 'Dignity Lens',
            'organization': 'Defy Racism Collective',
            'test_file': test_filename
        }
        
        with open('generated_content/test-index.json', 'w') as f:
            json.dump(index_data, f, indent=2)
        
        print("✅ Created test index file")
        return True
        
    except Exception as e:
        print(f"❌ Test content creation failed: {e}")
        return False

def run_minimal_generation():
    """Run a minimal version of content generation for testing"""
    print("\n🏃 MINIMAL GENERATION TEST")
    print("=" * 40)
    
    api_key = os.environ.get('CLAUDE_API_KEY')
    if not api_key:
        print("❌ No API key - skipping generation test")
        return False
    
    try:
        from anthropic import Anthropic
        
        client = Anthropic(api_key=api_key)
        
        # Simple dignity lens prompt
        prompt = """Using the Dignity Lens framework, create a brief analysis (200-300 words) of this hypothetical situation:

"Chicago announces new affordable housing development but requires existing residents to relocate during construction."

Apply the four domains:
1. Power Structures - Who makes housing decisions?
2. Control Mechanisms - How does this affect communities?  
3. Community Resistance - How might communities respond?
4. Liberation Strategies - What alternatives exist?

Include #DignityLens and credit Defy Racism Collective."""

        print("🤖 Making test API call...")
        
        response = client.messages.create(
            model="claude-3-5-haiku-20241022",
            max_tokens=500,
            messages=[{"role": "user", "content": prompt}]
        )
        
        content = response.content[0].text
        
        # Save test analysis
        os.makedirs('generated_content', exist_ok=True)
        test_filename = f"minimal-test-{datetime.now().strftime('%Y%m%d-%H%M%S')}.md"
        filepath = os.path.join('generated_content', test_filename)
        
        full_content = f"""---
Generated: {datetime.now().isoformat()}
Framework: Dignity Lens
Organization: Defy Racism Collective
Test: Minimal Generation
---

{content}

---
*Test analysis generated by Dignity AI system*
"""
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(full_content)
        
        print(f"✅ Generated test analysis: {filepath}")
        print(f"📊 Content length: {len(content)} characters")
        
        # Show snippet
        print("\n📝 Content preview:")
        print(content[:200] + "..." if len(content) > 200 else content)
        
        return True
        
    except Exception as e:
        print(f"❌ Minimal generation failed: {e}")
        return False

def main():
    """Run all tests"""
    print("🎯 DIGNITY AI - COMPREHENSIVE TESTING")
    print("=" * 60)
    print("Testing system components before full deployment\n")
    
    tests = [
        ("Environment Setup", test_environment),
        ("RSS Feed Connectivity", test_rss_feeds), 
        ("API Connection", test_api_connection),
        ("File Creation", create_test_content),
        ("Minimal Generation", run_minimal_generation)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results[test_name] = result
        except Exception as e:
            print(f"❌ {test_name} failed with error: {e}")
            results[test_name] = False
    
    # Summary
    print("\n" + "=" * 60)
    print("📋 TEST SUMMARY")
    print("=" * 60)
    
    for test_name, result in results.items():
        status = "✅ PASS" if result else "❌ FAIL"
        print(f"{test_name:<25} {status}")
    
    passed = sum(results.values())
    total = len(results)
    
    print(f"\nOverall: {passed}/{total} tests passed")
    
    if passed == total:
        print("🎉 All tests passed! System ready for deployment.")
        return 0
    else:
        print("⚠️  Some tests failed. Check issues before deploying.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
